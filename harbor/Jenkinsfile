def stackOutputs
def podTemplate = """
apiVersion: v1
kind: Pod
metadata:
  labels:
    for-app: ${params.APPLICATION_NAME}
spec:
  containers:
  - name: toolbox
    image: agilestacks/toolbox:stable
    command:
    - cat
    tty: true
    volumeMounts:
      - name: hub-state
        mountPath: /tmp/.hub/
  - name: buildbox
    image: openjdk:8-jdk
    command:
    - cat
    tty: true
  - name: kaniko
    image: gcr.io/kaniko-project/executor:debug-539ddefcae3fd6b411a95982a830d987f4214251
    imagePullPolicy: Always
    command:
    - /busybox/cat
    tty: true
    volumeMounts:
      - name: jenkins-docker-cfg
        mountPath: /root
  volumes:
    - name: jenkins-docker-cfg
      projected:
        sources:
        - secret:
            name: ${params.DOCKER_CONFIG_REF}
            items:
              - key: .dockerconfigjson
                path: .docker/config.json
    - name: hub-state
      configMap:
        name: ${params.APPLICATION_NAME}-state
"""

pipeline {
  triggers {
    githubPush()
    pollSCM('H/15 * * * *')
  }
  parameters {
    booleanParam(
        name: 'CLEAN_WORKSPACE',
        defaultValue: false,
        description: 'Start with empty workspace'
    )
  }
  agent {
    kubernetes {
      label params.APPLICATION_NAME
      defaultContainer 'toolbox'
      yaml podTemplate
    }
  }
  stages {
    stage('Init') {
      steps {
        script {
          if (params.CLEAN_WORKSPACE) {
            echo "Wiping out workspace"
            deleteDir()
          } else {
            echo 'Skipping cleanup due to user setting'
          }
        }
      }
    }
    stage('Checkout') {
      steps {
        checkout scm
      }
    }
    stage('Prepare') {
      steps {
        container('toolbox') {
          script {
            dir ('.hub') {
              hub.render(template: "templates/harbor/kubernetes.yaml.template", state: "/tmp/.hub/hub.state")
              sh script: "cp templates/harbor/kubernetes.yaml ../"
            }
            stackOutputs = hub.explain(state: "/tmp/.hub/hub.state").stackOutputs
          }
        }
      }
    }
    stage('Compile') {
      steps {
        container('buildbox') {
          sh script: './gradlew clean build allureReport'
        }
      }
    }
    stage('Image') {
      steps {
        container(name: 'kaniko', shell: '/busybox/sh') {
          withEnv(['PATH+EXTRA=/busybox:/kaniko']) {
            script {
              sh """#!/busybox/sh
              /kaniko/executor -f `pwd`/Dockerfile -c `pwd` --cache=true --destination=${stackOutputs['application.docker.image']}
              """
            }
          }
        }
      }
    }
    stage('Deploy') {
      environment {
        HUB_COMPONENT = 'spring-boot'
      }
      steps {
        container('toolbox') {
          script {
            sh script: "hub kubeconfig /tmp/.hub/hub.state --switch-kube-context"
            final namespaceExists = sh script: "kubectl get namespace ${stackOutputs['application.namespace']}", returnStatus: true
            if (namespaceExists != 0) {
              sh script: "kubectl create namespace ${stackOutputs['application.namespace']}"
            }
            final kubectl = "kubectl -n ${stackOutputs['application.namespace']}"
            sh script: "${kubectl} apply --force --record -f kubernetes.yaml"
          }
        }
      }
    }
    stage('Validate') {
      steps {
        container('toolbox') {
          script {
            final appUrl = stackOutputs['application.url'] as String
            retry(30) {
              sleep time: 5, unit: 'SECONDS'
              final resp = httpRequest url: "${appUrl}"
              echo resp.content
              assert resp.status == 200
            }
          }
        }
      }
    }
  }
  post {
    always {
      junit(
        testResults: './tests-*.xml',
        allowEmptyResults: true
      )
      archiveArtifacts(
        artifacts: 'build/libs/*.jar',
        allowEmptyArchive: true,
        fingerprint: true
      )
      publishHTML(target: [
              reportDir: 'build/reports/allure-report',
              reportFiles: 'index.html',
              reportName: 'Allure',
              keepAll: true
      ])
    }
  }
}
